#! /usr/bin/env perl

use warnings;
use strict;

sub intersect1d ($$$$)
{
  return 1 if $_[0] >= $_[2] && $_[0] <= $_[3];
  return 1 if $_[1] >= $_[2] && $_[1] <= $_[3];
  return 1 if $_[2] >= $_[0] && $_[2] <= $_[1];
  return 1 if $_[3] >= $_[0] && $_[3] <= $_[1];
  return 0;
}

sub intersect ($$)
{
  my ($xbox, $ybox) = @_;

  return intersect1d ($xbox->[0], $xbox->[1], $ybox->[0], $ybox->[1]) &&
	 intersect1d ($xbox->[2], $xbox->[3], $ybox->[2], $ybox->[3]);
}

sub box ($$$)
{
  return [ $_[0], $_[0] + 0.004 * length ($_[2]), $_[1] - 0.004, $_[1] + 0.004 ];
}

sub too_close ($$$$)
{
  my ($x, $y, $who, $previous) = @_;

  my $xbox = box ($x, $y, $who);

  my $intersect = 0;

  foreach my $p (@$previous)
    {
      my $ybox = box ($p->[0], $p->[1], $p->[2]);

      if (intersect ($xbox, $ybox))
        {
          ++$intersect;
        }
    }

  return $intersect;
}

my $xmin;
my $xmax;
my $ymin;
my $ymax;
my @data;

while (defined ($_ = <>))
  {
    my ($who, $x, $y) = split /\s+/, $_, 3;

    $xmin = $x if ! defined ($xmin) || $xmin > $x;
    $ymin = $y if ! defined ($ymin) || $ymin > $y;
    $xmax = $x if ! defined ($xmax) || $xmax < $x;
    $ymax = $y if ! defined ($ymax) || $ymax < $y;

    push @data, [ $who, $x, $y ];
  }

my @previous;

my $n = 0;
foreach my $d (@data)
  {
    my ($who, $x, $y) = @$d;

    $x /= ($xmax - $xmin);
    $y /= ($ymax - $ymin);

    my $tc = too_close ($x, $y, $who, \@previous);

    printf "%s %f %f %s %s\n", $who, $x, $y, $tc, $n;

    push @previous, [ $x, $y, $who, $tc ];
    ++$n;
  }
